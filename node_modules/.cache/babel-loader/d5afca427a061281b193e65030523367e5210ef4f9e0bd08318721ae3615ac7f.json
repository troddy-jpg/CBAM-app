{"ast":null,"code":"import { toDisplayString as _toDisplayString, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(_toDisplayString($data.filteredComments) + \" \", 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newCommentContent = $event),\n    placeholder: \"new comment\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newCommentContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.newComment())\n  }, \"Post comment\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, comment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: comment.id\n    });\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;+FACMA,sBAAgB,IAAE,GACpB,qDAA+D;+DAA/CA,uBAAiB;IAAEC,WAAW,EAAC;iDAA/BD,uBAAiB,KACjCE,oBAAmD;IAA1CC,OAAK,sCAAEC,mBAAU;KAAI,cAAY,sBAC1CC,oBAA4DC,6BAAnCN,cAAQ,EAApBO,OAAO;yBAApBF,oBAA4D;MAAxBG,GAAG,EAAED,OAAO,CAACE","names":["$data","placeholder","_createElementVNode","onClick","$options","_createElementBlock","_Fragment","comment","key","id"],"sourceRoot":"","sources":["/Users/trevs/Schoolwork/CBAM-app/src/components/CommentPageView.vue"],"sourcesContent":["<template>\n    {{filteredComments}}\n    <input v-model=\"newCommentContent\" placeholder=\"new comment\" />\n    <button @click=\"newComment()\">Post comment</button>\n    <div v-for=\"(comment) in comments\" :key=\"comment.id\" ></div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { useAuth0 } from '@auth0/auth0-vue';\n\n\nexport default {\n    auth0: useAuth0,\n    name: 'SingleEssayView',\n    data() {\n        return {\n            newCommentContent: \"\",\n            comments: [ { sentence:-1}],\n            loading: true,\n            errored: false,\n            user: this.$auth0.user,\n            isAuthenticated: this.$auth0.isAuthenticated,\n            filteredComments: [{}],\n        }\n    },\n    mounted() {\n        this.loadComments()\n        this.filterComments()\n    },\n    methods: {\n        loadComments() {\n            this.loading = true\n            axios\n                .get('http://localhost:5000/essay/' + this.$route.params.id + '/comments', {email: this.user.email})\n                .then(response => {\n                    console.log(response.data)\n                    this.comments = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                    this.errored = true\n                })\n                .finally(() => {\n                    this.loading = false\n                })\n        },\n        filterComments() {\n           this.filteredComments = this.comments.filter(comment => comment.sentence === this.$route.params.line)\n        },\n        newComment() {\n            // id(int): The id of the comment.\n            //     essay_id(int): The id of the essay the comment is on.\n            //         user_email(str): The email of the user who posted the comment.\n            //             content(str): The content of the comment.\n            //                 created_at(datetime): The timestamp the comment was created.\n            //                     sentences(list): The sentences the comment spans.Mutually exclusive with word.\n            //                         sentence(int): The sentence the comment starts on.\n            //                             word(int): The word the comment is on.Mutually exclusive with sentences.\n            axios\n                .post('http://localhost:5000/comments', { essay_id: this.$route.params.id, user_email: this.user.email, content: this.newCommentContent, sentence:  this.$route.params.line  })\n                .then(response => {\n                    console.log(response.data)\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n                .finally(() => {\n                    this.loadComments()\n                })\n        }\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}