{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelCheckbox as _vModelCheckbox } from \"vue\";\nconst _hoisted_1 = {\n  id: \"todos-vue\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", null, \"New task:\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"onUpdate:modelValue\", \"disabled\", \"onKeyup\"];\nconst _hoisted_4 = [\"onUpdate:modelValue\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_hoisted_2, _createCommentVNode(\" use v-model for 2-way binding, call method when user press enter @keyup.enter\"), _withDirectives(_createElementVNode(\"input\", {\n    id: \"new_todo\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.new_todo = $event),\n    placeholder: \"edit me\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys($event => $options.add_todo(), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, _ctx.new_todo]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.add_todo())\n  }, \"Add\")]), _createElementVNode(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.todos, (todo, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: todo.id\n    }, [_createElementVNode(\"label\", null, _toDisplayString(index) + \".\", 1 /* TEXT */), _createCommentVNode(\" we also want to be able to directly update the existing todo, this is handled by v-model, but our database needs to be handled differently\"), _withDirectives(_createElementVNode(\"input\", {\n      \"onUpdate:modelValue\": $event => todo.content = $event,\n      disabled: todo.done,\n      onKeyup: _withKeys($event => $options.update_todo(todo), [\"enter\"])\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), [[_vModelText, todo.content]]), _createCommentVNode(\" when click the checkbox, the input becomes disabled \"), _withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": $event => todo.done = $event\n    }, null, 8 /* PROPS */, _hoisted_4), [[_vModelCheckbox, todo.done]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.remove_todo(index)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"mappings":";;EACSA,EAAE,EAAC;AAAW;gCAEXC,oBAAwB,eAAjB,WAAS;;;;;uBAFxBC,oBAiBM,OAjBNC,UAiBM,GAhBFF,oBAKM,cAJFG,UAAwB,EACxBC,qGAAqF,kBACrFJ,oBAAwF;IAAjFD,EAAE,EAAC,UAAU;+DAAUM,aAAQ;IAAEC,WAAW,EAAC,SAAS;IAAEC,OAAK,gDAAQC,iBAAQ;iEAAtDH,aAAQ,KACtCL,oBAAwC;IAA/BS,OAAK,sCAAED,iBAAQ;KAAI,KAAG,KAEnCR,oBASM,iCARFC,oBAOMS,6BAPuBL,UAAK,GAArBM,IAAI,EAAEC,KAAK;yBAAxBX,oBAOM;MAP+BY,GAAG,EAAEF,IAAI,CAACZ;QAC3CC,oBAA2B,gCAAjBY,KAAK,IAAG,GAAC,iBACnBR,kKAAkJ,kBAClJJ,oBAAqF;uCAArEW,IAAI,CAACG,OAAO;MAAGC,QAAQ,EAAEJ,IAAI,CAACK,IAAI;MAAGT,OAAK,sBAAQC,oBAAW,CAACG,IAAI;yEAAlEA,IAAI,CAACG,OAAO,KAC5BV,4EAA4D,kBAC5DJ,oBAA2C;MAApCiB,IAAI,EAAC,UAAU;uCAAUN,IAAI,CAACK,IAAI;4DAATL,IAAI,CAACK,IAAI,KACzChB,oBAAmD;MAA1CS,OAAK,YAAED,oBAAW,CAACI,KAAK;OAAG,QAAM","names":["id","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode","_ctx","placeholder","onKeyup","$options","onClick","_Fragment","todo","index","key","content","disabled","done","type"],"sourceRoot":"","sources":["/Users/trevs/Schoolwork/CBAM-app/src/components/todo-comp.vue"],"sourcesContent":["<template>\n    <div id=\"todos-vue\">\n        <div>\n            <label>New task:</label>\n            <!-- use v-model for 2-way binding, call method when user press enter @keyup.enter-->\n            <input id=\"new_todo\" v-model=\"new_todo\" placeholder=\"edit me\" @keyup.enter=\"add_todo()\">\n            <button @click=\"add_todo()\">Add</button>\n        </div>\n        <div>\n            <div v-for=\"(todo, index) in todos\" :key=\"todo.id\">\n                <label>{{ index }}.</label>\n                <!-- we also want to be able to directly update the existing todo, this is handled by v-model, but our database needs to be handled differently-->\n                <input v-model=\"todo.content\" :disabled=\"todo.done\" @keyup.enter=\"update_todo(todo)\">\n                <!-- when click the checkbox, the input becomes disabled -->\n                <input type=\"checkbox\" v-model=\"todo.done\">\n                <button @click=\"remove_todo(index)\">Delete</button>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nexport default {\n    name: \"todo_comp\",\n    data: function () {\n        return {\n            new_todo: \"\",\n            todos: [\n                { id: 1, content: \"write paper\", done: false },\n                { id: 2, content: \"read paper\", done: false },\n                { id: 3, content: \"review paper\", done: false }\n            ]\n        };\n    },\n    computed: {\n        // the id of the new todos is the last id + 1\n        new_todo_id: function () {\n            return this.todos[this.todos.length - 1].id + 1;\n        }\n    },\n    methods: {\n        // all the methods will be replaced with REST API call later\n        remove_todo: function (index) {\n            this.todos.splice(index, 1);\n        },\n        add_todo: function () {\n            this.todos.push({\n                id: this.new_todo_id,\n                content: this.new_todo,\n                done: false\n            });\n        },\n        // this is to update data to backend\n        update_todo: function (todo) {\n            console.log(\"new value:\");\n            console.log(todo.id);\n            console.log(todo.content);\n        }\n    }\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}