{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = {\n  key: 2\n};\nconst _hoisted_5 = {\n  key: 3\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Comments\", -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"i\", null, \"Click on a sentence / line to bring up it's comments. viewing: \", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  key: 4\n};\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */);\nconst _hoisted_10 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h1\", null, _toDisplayString(this.essay.title), 1 /* TEXT */), _createElementVNode(\"i\", null, \"modified \" + _toDisplayString(this.essay.date_modified) + \", created \" + _toDisplayString(this.essay.date_created) + \", revision \" + _toDisplayString(this.essay.revision + 1), 1 /* TEXT */), !this.editMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.essayLines, (line, index) => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: index\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $data.selectedLine = index\n    }, _toDisplayString(line) + \".\", 9 /* TEXT, PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), this.editMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => this.newEssayTitle = $event),\n    placeholder: \"Paste new essay title\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, this.newEssayTitle]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => this.newEssayContent = $event),\n    placeholder: \"Past new essay content\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, this.newEssayContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => this.rePostEssay())\n  }, \"Post Revision\")])) : _createCommentVNode(\"v-if\", true), !this.isOwner ? (_openBlock(), _createElementBlock(\"i\", _hoisted_4, \"Essay by \" + _toDisplayString($data.essay.user_email), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), this.isOwner ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => this.editMode = true)\n  }, \"Edit essay\")])) : _createCommentVNode(\"v-if\", true), _hoisted_6, _hoisted_7, $data.selectedLine != -1 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"h1\", null, _toDisplayString($data.selectedLine), 1 /* TEXT */), _hoisted_9, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.comments, comment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: comment.sentence\n    }, [comment.sentence === $data.selectedLine ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"label\", null, _toDisplayString(comment.content), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => this.newCommentContent = $event),\n    placeholder: \"new comment\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, this.newCommentContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => this.postComment())\n  }, \"Post comment\")])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;gCAiBIA,oBAAiB,YAAb,UAAQ;gCACZA,oBAAsE,WAAnE,iEAA+D;;;;gCAG9DA,oBAAI;;;;;6DApBRA,oBAA6B,kCAAlBC,KAAK,CAACC,KAAK,kBACtBF,oBAAyH,WAAtH,WAAS,yBAAOC,KAAK,CAACE,aAAa,IAAE,YAAU,yBAAOF,KAAK,CAACG,YAAY,IAAE,aAAW,yBAAQH,KAAK,CAACI,QAAQ,4BAC7FC,QAAQ,kBAAzBC,oBAIM,uCAHFA,oBAEOC,kCAF4BC,UAAU,GAA/BC,IAAI,EAAEC,KAAK;yBAAzBJ,oBAEO;MAFyCK,GAAG,EAAED;IAAK,IACtDX,oBAAsD;MAA/Ca,OAAK,YAAGC,kBAAY,GAAGH;wBAAUD,IAAI,IAAE,GAAC;8EAGvCJ,QAAQ,kBAAxBC,oBAIM,oCAHFP,oBAA0E;oEAArDe,aAAa;IAAEC,WAAW,EAAC;sDAA3BD,aAAa,qBAClCf,oBAA4E;oEAAvDiB,eAAe;IAAED,WAAW,EAAC;sDAA7BC,eAAe,KACpCjB,oBAA0D;IAAjDa,OAAK,2CAAOK,WAAW;KAAI,eAAa,gDAEtCC,OAAO,kBAAtBZ,oBAAyD,iBAAjC,WAAS,oBAAEO,WAAK,CAACM,UAAU,4DACnCD,OAAO,kBAAvBZ,oBAEM,oBADFP,oBAA2D;IAAlDa,OAAK,2CAAQP,QAAQ;KAAU,YAAU,0CAEtDe,UAAiB,EACjBC,UAAsE,EAC1DR,kBAAY,wBAAxBP,oBASM,oBARFP,oBAAyB,6BAAnBc,kBAAY,kBAClBS,UAAI,qBACJhB,oBAGMC,kCAHwBgB,QAAQ,EAAzBC,OAAO;yBAApBlB,oBAGM;MAHmCK,GAAG,EAAEa,OAAO,CAACC;QACtCD,OAAO,CAACC,QAAQ,KAAKZ,kBAAY,kBAA7CP,oBAC0C,qBAA1CP,oBAAoC,gCAA1ByB,OAAO,CAACE,OAAO;kDAE7B3B,oBAAoE;oEAA/C4B,iBAAiB;IAAEZ,WAAW,EAAC;sDAA/BY,iBAAiB,KACtC5B,oBAAyD;IAAhDa,OAAK,2CAAOgB,WAAW;KAAI,cAAY","names":["_createElementVNode","essay","title","date_modified","date_created","revision","editMode","_createElementBlock","_Fragment","essayLines","line","index","key","onClick","$data","newEssayTitle","placeholder","newEssayContent","rePostEssay","isOwner","user_email","_hoisted_6","_hoisted_7","_hoisted_9","comments","comment","sentence","content","newCommentContent","postComment"],"sourceRoot":"","sources":["/Users/trevs/Schoolwork/CBAM-app/src/components/SingleEssayView.vue"],"sourcesContent":["<template>\n    <h1>{{this.essay.title}}</h1>\n    <i>modified {{this.essay.date_modified}}, created {{this.essay.date_created}}, revision {{(this.essay.revision + 1)}}</i>\n    <div v-if=\"!this.editMode\">\n        <span v-for=\"(line, index) in this.essayLines\" :key=\"index\">\n            <span @click=\"(selectedLine = index)\">{{line}}.</span>\n        </span>\n    </div>\n    <div v-if=\"this.editMode\">\n        <input v-model=\"this.newEssayTitle\" placeholder=\"Paste new essay title\" />\n        <input v-model=\"this.newEssayContent\" placeholder=\"Past new essay content\"/>\n        <button @click=\"this.rePostEssay()\">Post Revision</button>\n    </div>\n    <i v-if=\"!this.isOwner\">Essay by {{essay.user_email}}</i>\n    <div v-if=\"this.isOwner\">\n        <button @click=\"(this.editMode = true)\">Edit essay</button>\n    </div>\n    <h2>Comments</h2>\n    <i>Click on a sentence / line to bring up it's comments. viewing: </i>\n    <div v-if=\"(selectedLine != -1)\">\n        <h1>{{selectedLine}}</h1>\n        <hr>\n        <div v-for=\"(comment) in this.comments\" :key=\"comment.sentence\">\n            <div v-if=\"(comment.sentence === selectedLine)\">\n            <label>{{ comment.content }}</label></div>\n        </div>\n        <input v-model=\"this.newCommentContent\" placeholder=\"new comment\" />\n        <button @click=\"this.postComment()\">Post comment</button>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { useAuth0 } from '@auth0/auth0-vue';\n\n\nexport default {\n    auth0: useAuth0,\n    name: 'SingleEssayView',\n    data() {\n        return {\n            essay: { title: \"\", content:\"\", user_email:\"\"},\n            loading: true,\n            errored: false,\n            user: this.$auth0.user,\n            isAuthenticated: this.$auth0.isAuthenticated,\n            isOwner: false,\n            essayLines: {},\n            selectedLine: -1,\n            newCommentContent: \"\",\n            editMode: false,\n            newEssayTitle:\"\",\n            newEssayContent:\"\",\n        }\n    },\n    mounted() {\n        this.loadEssay()\n    },\n    methods: {\n        loadEssay() {\n            this.loading = true\n            axios\n                .get('http://localhost:5000/essay/' + this.$route.params.id)\n                .then(response => {\n                    console.log(response.data)\n                    this.essay = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                    this.errored = true\n                })\n                .finally(() => {\n                    this.loading = false\n                    this.parseContent()\n                    this.checkOwnership()\n                    this.loadComments()\n                })\n        },\n        checkOwnership() {\n            this.isOwner = this.essay.user_email === this.user.email\n            console.log(this.isOwner)\n        },\n        parseContent() {\n            this.essayLines = this.essay.content.split(\".\")\n            console.log(this.essayLines)\n        },\n        // openCommentsOnLine(lineNumber) {\n        //     console.log(lineNumber)\n        //     this.$router.push('/essay/' + this.essay.id+\"/\" + lineNumber)\n        // },\n        loadComments() {\n            this.loading = true\n            axios\n                .get('http://localhost:5000/essay/' + this.$route.params.id + '/comments', { email: this.user.email })\n                .then(response => {\n                    console.log(response.data)\n                    this.comments = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                    this.errored = true\n                })\n                .finally(() => {\n                    this.loading = false\n                    this.$forceUpdate\n                })\n        },\n        postComment() {\n            axios\n                .post('http://localhost:5000/comments', { essay_id: this.$route.params.id, user_email: this.user.email, content: this.newCommentContent, sentence: this.selectedLine })\n                .then(response => {\n                    console.log(response.data)\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n                .finally(() => {\n                    console.log(\"finally\")\n                    this.loadComments()\n                    this.$forceUpdate()\n                })\n        },\n        rePostEssay() {\n            if (!this.isAuthenticated || !this.isOwner)\n                return//don't post if not authenticated\n            axios\n                .post(('http://localhost:5000/essay/' + this.$route.params.id), {\n                    email: this.user.email,\n                    title: this.newEssayTitle,\n                    content: this.newEssayContent,\n                })\n                .then((response) => {\n                    console.log(response);\n                })\n                .finally(() => {\n                    this.loadEssay()\n                    this.editMode = false\n                })\n        },\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}