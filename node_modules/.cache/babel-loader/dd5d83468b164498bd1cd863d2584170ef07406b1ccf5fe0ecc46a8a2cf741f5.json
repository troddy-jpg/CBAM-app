{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Comments\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"i\", null, \"Click on a sentence / line to bring up it's comments\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h1\", null, _toDisplayString($data.essay.title), 1 /* TEXT */), _createElementVNode(\"i\", null, \"modified \" + _toDisplayString($data.essay.date_modified) + \", created \" + _toDisplayString($data.essay.date_created) + \", revision \" + _toDisplayString($data.essay.revision + 1), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.essayLines, (line, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => _ctx.openCommentsOnLine(index)\n    }, _toDisplayString(line), 9 /* TEXT, PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"i\", null, \"Essay by \" + _toDisplayString($data.essay.user_email), 1 /* TEXT */), $data.isOwner ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_2, \"owner\")) : _createCommentVNode(\"v-if\", true), _hoisted_3, _hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.comments, comment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: comment.sentence\n    }, [comment.sentence === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"label\", null, _toDisplayString(comment.sentence), 1 /* TEXT */), _createElementVNode(\"label\", null, \" | \" + _toDisplayString(comment.content), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;gCAQIA,oBAAiB,YAAb,UAAQ;gCACZA,oBAA2D,WAAxD,sDAAoD;;;;;6DARvDA,oBAAwB,6BAAlBC,WAAK,CAACC,KAAK,kBACjBF,oBAA0G,WAAvG,WAAS,oBAAEC,WAAK,CAACE,aAAa,IAAE,YAAU,oBAAEF,WAAK,CAACG,YAAY,IAAE,aAAW,oBAAGH,WAAK,CAACI,QAAQ,yCAC/FC,oBAEMC,6BAFuBN,gBAAU,GAA1BO,IAAI,EAAEC,KAAK;yBAAxBH,oBAEM;MAFoCI,GAAG,EAAED;IAAK,IAChDT,oBAAwD;MAAjDW,OAAK,YAAEC,uBAAkB,CAACH,KAAK;wBAAKD,IAAI;kCAEnDR,oBAAoC,WAAjC,WAAS,oBAAEC,WAAK,CAACY,UAAU,kBACpBZ,aAAO,kBAAjBK,oBAA6B,kBAAV,OAAK,wCACxBQ,UAAiB,EACjBC,UAA2D,qBAC3DT,oBAIMC,6BAJmBK,aAAQ,EAApBI,OAAO;yBAApBV,oBAIM;MAJ8BI,GAAG,EAAEM,OAAO,CAACC;QACjCD,OAAO,CAACC,QAAQ,wBAA5BX,oBAE6C,oBAD7CN,oBAAqC,gCAA3BgB,OAAO,CAACC,QAAQ,kBAC1BjB,oBAAuC,eAAhC,KAAG,oBAAGgB,OAAO,CAACE,OAAO","names":["_createElementVNode","$data","title","date_modified","date_created","revision","_createElementBlock","_Fragment","line","index","key","onClick","_ctx","user_email","_hoisted_3","_hoisted_4","comment","sentence","content"],"sourceRoot":"","sources":["/Users/trevs/Schoolwork/CBAM-app/src/components/SingleEssayView.vue"],"sourcesContent":["<template>\n    <h1>{{essay.title}}</h1>\n    <i>modified {{essay.date_modified}}, created {{essay.date_created}}, revision {{(essay.revision + 1)}}</i>\n    <div v-for=\"(line, index) in essayLines\" :key=\"index\">\n        <span @click=\"openCommentsOnLine(index)\">{{line}}</span>\n    </div>\n    <i>Essay by {{essay.user_email}}</i>\n    <h1 v-if=\"isOwner\">owner</h1>\n    <h2>Comments</h2>\n    <i>Click on a sentence / line to bring up it's comments</i>\n    <div v-for=\"(comment) in comments\" :key=\"comment.sentence\">\n        <div v-if=\"(comment.sentence === 0)\">\n        <label>{{ comment.sentence }}</label>\n        <label> | {{ comment.content }}</label></div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { useAuth0 } from '@auth0/auth0-vue';\n\n\nexport default {\n    auth0: useAuth0,\n    name: 'SingleEssayView',\n    data() {\n        return {\n            essay: { title: \"\", content:\"\", user_email:\"\"},\n            loading: true,\n            errored: false,\n            user: this.$auth0.user,\n            isAuthenticated: this.$auth0.isAuthenticated,\n            isOwner: false,\n            essayLines: {},\n        }\n    },\n    mounted() {\n        this.loadEssay()\n        this.checkOwnership()\n        this.loadComments()\n    },\n    methods: {\n        loadEssay() {\n            this.loading = true\n            axios\n                .get('http://localhost:5000/essay/' + this.$route.params.id)\n                .then(response => {\n                    console.log(response.data)\n                    this.essay = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                    this.errored = true\n                })\n                .finally(() => {\n                    this.loading = false\n                    this.parseContent()\n                })\n        },\n        checkOwnership() {\n            this.isOwner= this.user.email === this.essay.user_email\n        },\n        parseContent() {\n            this.essayLines = this.essay.content.split(\".\")\n            console.log(this.essayLines)\n        },\n        // openCommentsOnLine(lineNumber) {\n        //     console.log(lineNumber)\n        //     this.$router.push('/essay/' + this.essay.id+\"/\" + lineNumber)\n        // },\n        loadComments() {\n            this.loading = true\n            axios\n                .get('http://localhost:5000/essay/' + this.$route.params.id + '/comments', { email: this.user.email })\n                .then(response => {\n                    console.log(response.data)\n                    this.comments = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                    this.errored = true\n                })\n                .finally(() => {\n                    this.loading = false\n                    this.filterComments(0)\n                })\n        },\n        filterComments(line) {\n            this.filteredComments = [{}]\n            console.log(line)\n            console.log(\"comment \" + this.comments[0].sentence)\n            for (var k = 0; k < this.comments.length; k++){\n                if (this.comments[k].sentence === line)\n                    this.filteredComments += this.comments[k]\n            }\n        },\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}