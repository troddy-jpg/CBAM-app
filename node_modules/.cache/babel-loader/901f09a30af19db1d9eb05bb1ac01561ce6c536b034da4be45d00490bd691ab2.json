{"ast":null,"code":"import axios from 'axios';\nimport { useAuth0 } from '@auth0/auth0-vue';\nexport default {\n  auth0: useAuth0,\n  name: 'SingleEssayView',\n  data() {\n    return {\n      newCommentContent: \"\",\n      comments: [{\n        sentence: -1\n      }],\n      loading: true,\n      errored: false,\n      user: this.$auth0.user,\n      isAuthenticated: this.$auth0.isAuthenticated,\n      filteredComments: [{}],\n      myLine: this.$route.params.line\n    };\n  },\n  mounted() {\n    this.loadComments();\n    this.filterComments();\n  },\n  methods: {\n    loadComments() {\n      this.loading = true;\n      axios.get('http://localhost:5000/essay/' + this.$route.params.id + '/comments', {\n        email: this.user.email\n      }).then(response => {\n        console.log(response.data);\n        this.comments = response.data;\n      }).catch(error => {\n        console.log(error);\n        this.errored = true;\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    filterComments() {\n      this.filteredComments = this.comments.filter(comment => comment.sentence === this.$route.params.line);\n    },\n    newComment() {\n      // id(int): The id of the comment.\n      //     essay_id(int): The id of the essay the comment is on.\n      //         user_email(str): The email of the user who posted the comment.\n      //             content(str): The content of the comment.\n      //                 created_at(datetime): The timestamp the comment was created.\n      //                     sentences(list): The sentences the comment spans.Mutually exclusive with word.\n      //                         sentence(int): The sentence the comment starts on.\n      //                             word(int): The word the comment is on.Mutually exclusive with sentences.\n      axios.post('http://localhost:5000/comments', {\n        essay_id: this.$route.params.id,\n        user_email: this.user.email,\n        content: this.newCommentContent,\n        sentence: this.$route.params.line\n      }).then(response => {\n        console.log(response.data);\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => {\n        this.loadComments();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAUA,OAAOA,KAAI,MAAO,OAAM;AACxB,SAASC,QAAO,QAAS,kBAAkB;AAG3C,eAAe;EACXC,KAAK,EAAED,QAAQ;EACfE,IAAI,EAAE,iBAAiB;EACvBC,IAAI,GAAG;IACH,OAAO;MACHC,iBAAiB,EAAE,EAAE;MACrBC,QAAQ,EAAE,CAAE;QAAEC,QAAQ,EAAC,CAAC;MAAC,CAAC,CAAC;MAC3BC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,KAAK;MACdC,IAAI,EAAE,IAAI,CAACC,MAAM,CAACD,IAAI;MACtBE,eAAe,EAAE,IAAI,CAACD,MAAM,CAACC,eAAe;MAC5CC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;MACtBC,MAAM,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC;IAC/B;EACJ,CAAC;EACDC,OAAO,GAAG;IACN,IAAI,CAACC,YAAY,EAAC;IAClB,IAAI,CAACC,cAAc,EAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACLF,YAAY,GAAG;MACX,IAAI,CAACX,OAAM,GAAI,IAAG;MAClBR,KAAI,CACCsB,GAAG,CAAC,8BAA6B,GAAI,IAAI,CAACP,MAAM,CAACC,MAAM,CAACO,EAAC,GAAI,WAAW,EAAE;QAACC,KAAK,EAAE,IAAI,CAACd,IAAI,CAACc;MAAK,CAAC,EAClGC,IAAI,CAACC,QAAO,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACtB,IAAI;QACzB,IAAI,CAACE,QAAO,GAAIoB,QAAQ,CAACtB,IAAG;MAChC,CAAC,EACAyB,KAAK,CAACC,KAAI,IAAK;QACZH,OAAO,CAACC,GAAG,CAACE,KAAK;QACjB,IAAI,CAACrB,OAAM,GAAI,IAAG;MACtB,CAAC,EACAsB,OAAO,CAAC,MAAM;QACX,IAAI,CAACvB,OAAM,GAAI,KAAI;MACvB,CAAC;IACT,CAAC;IACDY,cAAc,GAAG;MACd,IAAI,CAACP,gBAAe,GAAI,IAAI,CAACP,QAAQ,CAAC0B,MAAM,CAACC,OAAM,IAAKA,OAAO,CAAC1B,QAAO,KAAM,IAAI,CAACQ,MAAM,CAACC,MAAM,CAACC,IAAI;IACvG,CAAC;IACDiB,UAAU,GAAG;MACT;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAlC,KAAI,CACCmC,IAAI,CAAC,gCAAgC,EAAE;QAAEC,QAAQ,EAAE,IAAI,CAACrB,MAAM,CAACC,MAAM,CAACO,EAAE;QAAEc,UAAU,EAAE,IAAI,CAAC3B,IAAI,CAACc,KAAK;QAAEc,OAAO,EAAE,IAAI,CAACjC,iBAAiB;QAAEE,QAAQ,EAAG,IAAI,CAACQ,MAAM,CAACC,MAAM,CAACC;MAAM,CAAC,EAC7KQ,IAAI,CAACC,QAAO,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACtB,IAAI;MAC7B,CAAC,EACAyB,KAAK,CAACC,KAAI,IAAK;QACZH,OAAO,CAACC,GAAG,CAACE,KAAK;MACrB,CAAC,EACAC,OAAO,CAAC,MAAM;QACX,IAAI,CAACZ,YAAY,EAAC;MACtB,CAAC;IACT;EACJ;AACJ","names":["axios","useAuth0","auth0","name","data","newCommentContent","comments","sentence","loading","errored","user","$auth0","isAuthenticated","filteredComments","myLine","$route","params","line","mounted","loadComments","filterComments","methods","get","id","email","then","response","console","log","catch","error","finally","filter","comment","newComment","post","essay_id","user_email","content"],"sourceRoot":"","sources":["/Users/trevs/Schoolwork/CBAM-app/src/components/CommentPageView.vue"],"sourcesContent":["<template>\n    <input v-model=\"newCommentContent\" placeholder=\"new comment\" />\n    <button @click=\"newComment()\">Post comment</button>\n    <div v-for=\"(comment) in comments\" :key=\"comment.id\" >\n            <label v-if=\"(comment.sentence === this.$route.params.line)\">'{{ comment.sentence }}'</label>\n            <label>'{{ comment.content }}'</label>\n    </div>  \n</template>\n\n<script>\nimport axios from 'axios'\nimport { useAuth0 } from '@auth0/auth0-vue';\n\n\nexport default {\n    auth0: useAuth0,\n    name: 'SingleEssayView',\n    data() {\n        return {\n            newCommentContent: \"\",\n            comments: [ { sentence:-1}],\n            loading: true,\n            errored: false,\n            user: this.$auth0.user,\n            isAuthenticated: this.$auth0.isAuthenticated,\n            filteredComments: [{}],\n            myLine: this.$route.params.line,\n        }\n    },\n    mounted() {\n        this.loadComments()\n        this.filterComments()\n    },\n    methods: {\n        loadComments() {\n            this.loading = true\n            axios\n                .get('http://localhost:5000/essay/' + this.$route.params.id + '/comments', {email: this.user.email})\n                .then(response => {\n                    console.log(response.data)\n                    this.comments = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                    this.errored = true\n                })\n                .finally(() => {\n                    this.loading = false\n                })\n        },\n        filterComments() {\n           this.filteredComments = this.comments.filter(comment => comment.sentence === this.$route.params.line)\n        },\n        newComment() {\n            // id(int): The id of the comment.\n            //     essay_id(int): The id of the essay the comment is on.\n            //         user_email(str): The email of the user who posted the comment.\n            //             content(str): The content of the comment.\n            //                 created_at(datetime): The timestamp the comment was created.\n            //                     sentences(list): The sentences the comment spans.Mutually exclusive with word.\n            //                         sentence(int): The sentence the comment starts on.\n            //                             word(int): The word the comment is on.Mutually exclusive with sentences.\n            axios\n                .post('http://localhost:5000/comments', { essay_id: this.$route.params.id, user_email: this.user.email, content: this.newCommentContent, sentence:  this.$route.params.line  })\n                .then(response => {\n                    console.log(response.data)\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n                .finally(() => {\n                    this.loadComments()\n                })\n        }\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}