{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"essays\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Essays section\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Click an essay to view it\", -1 /* HOISTED */);\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", null, \" By \", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"span\", null, \" V. \", -1 /* HOISTED */);\nconst _hoisted_7 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _hoisted_3, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.essays, essay => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: essay.id\n    }, [_createElementVNode(\"div\", {\n      onClick: $event => $options.singleEssay(essay.id)\n    }, [_createElementVNode(\"label\", null, \"'\" + _toDisplayString(essay.title) + \"'\", 1 /* TEXT */), _hoisted_5, _createElementVNode(\"label\", null, _toDisplayString(essay.user), 1 /* TEXT */), _hoisted_6, _createElementVNode(\"label\", null, _toDisplayString(essay.revision), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_4), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteEssay(essay.id)\n    }, \"Delete Essay\", 8 /* PROPS */, _hoisted_7)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newEssayTitle = $event),\n    placeholder: \"Title of new essay\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newEssayTitle]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.newEssayContent = $event),\n    placeholder: \"Content of new essay\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newEssayContent]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.postEssay($data.newEssayTitle, $data.newEssayContent))\n  }, \"Post new essay\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.reloadEssays())\n  }, \"refresh essays\")])]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAQ;gCACfC,oBAAuB,YAAnB,gBAAc;gCAClBA,oBAAkC,YAA9B,2BAAyB;;gCAIzBA,oBAAiB,cAAX,MAAI;gCAEVA,oBAAiB,cAAX,MAAI;;;uBARlBC,oBAmBM,OAnBNC,UAmBM,GAlBFC,UAAuB,EACvBC,UAAkC,qBAClCH,oBASMI,6BATiBC,YAAM,EAAhBC,KAAK;yBAAlBN,oBASM;MAT0BO,GAAG,EAAED,KAAK,CAACE;QACvCT,oBAMM;MANAU,OAAK,YAAEC,oBAAW,CAACJ,KAAK,CAACE,EAAE;QACjCT,oBAAkC,eAA3B,GAAC,oBAAGO,KAAK,CAACK,KAAK,IAAG,GAAC,iBAC1BC,UAAiB,EACjBb,oBAA+B,gCAArBO,KAAK,CAACO,IAAI,kBACpBC,UAAiB,EACjBf,oBAAmC,gCAAzBO,KAAK,CAACS,QAAQ,+CAExBhB,oBAA4D;MAAnDU,OAAK,YAAEC,oBAAW,CAACJ,KAAK,CAACE,EAAE;OAAG,cAAY;kCAEvDT,oBAKM,8BAJFA,oBAAkE;+DAAlDM,mBAAa;IAAEW,WAAW,EAAC;iDAA3BX,mBAAa,qBAC7BN,oBAAsE;+DAAtDM,qBAAe;IAAEW,WAAW,EAAC;iDAA7BX,qBAAe,KAC/BN,oBAAiF;IAAxEU,OAAK,sCAAEC,kBAAS,CAACL,mBAAa,EAACA,qBAAe;KAAG,gBAAc,GACxEN,oBAAuD;IAA9CU,OAAK,sCAAEC,qBAAY;KAAI,gBAAc","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","$data","essay","key","id","onClick","$options","title","_hoisted_5","user","_hoisted_6","revision","placeholder"],"sourceRoot":"","sources":["/Users/trevs/Schoolwork/CBAM-app/src/views/EssaysView.vue"],"sourcesContent":["<template>\n    <div class=\"essays\">\n        <h1>Essays section</h1>\n        <h3>Click an essay to view it</h3>\n        <div v-for=\"(essay) in essays\" :key=\"essay.id\" >\n            <div @click=\"singleEssay(essay.id)\">\n            <label>'{{ essay.title }}'</label>\n            <span> By </span>\n            <label>{{ essay.user }}</label>\n            <span> V. </span>\n            <label>{{ essay.revision }}</label>\n            </div>\n            <button @click=\"deleteEssay(essay.id)\">Delete Essay</button>\n        </div>\n        <div>\n            <input v-model=\"newEssayTitle\" placeholder=\"Title of new essay\" />\n            <input v-model=\"newEssayContent\" placeholder=\"Content of new essay\" />\n            <button @click=\"postEssay(newEssayTitle,newEssayContent)\">Post new essay</button>\n            <button @click=\"reloadEssays()\">refresh essays</button>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { useAuth0 } from '@auth0/auth0-vue';\n\n\nexport default {\n    auth0: useAuth0,\n    name: 'EssaysView',\n    components: {\n        \n    },\n    data() {\n        return {\n            essays: [\n                {}//{ id: -1, user_id: -1, title: \"\", content: \"\", revision: -1, format: \"\", date_modified: \"\" },\n            ],\n            errored: false,\n            loading: true,\n            user: this.$auth0.user,\n            isAuthenticated: this.$auth0.isAuthenticated,\n            newEssayTitle: null,\n            newEssayContent: null,\n        }\n    },\n    mounted() {\n        this.reloadEssays()\n    },\n    methods: {\n        postEssay(title = \"\", content = \"\") {\n            if (!this.isAuthenticated)\n                return//don't post if not authenticated\n            axios\n                .post(('http://localhost:5000/essays'),{\n                    user_email: this.user.email,\n                    title: title,\n                    content: content,\n                })\n                .then((response)=> {\n                    console.log(response);\n                })\n                .finally(()=> this.reloadEssays())\n        },\n        reloadEssays() {\n            if (!this.isAuthenticated)\n                return//don't make API call if not authenticated\n            this.loading = true\n            axios\n                .get('http://localhost:5000/essays')\n                .then(response => (this.essays = response.data))\n                .catch(error => {\n                    console.log(error)\n                    this.errored = true\n                })\n                .finally(() => this.loading = false)\n                \n        },\n        singleEssay(id) {\n            this.$router.push('/essay/' + id)\n        },\n        deleteEssay(id) {\n            axios\n                .delete('http://localhost:5000/essay/' + id)\n                .then((response) => {\n                    console.log(response);\n                })\n                .finally(() => this.reloadEssays())\n        }\n    }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}